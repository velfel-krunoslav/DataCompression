def is_prefix_free(codes):
    sorted_codes = sorted(codes, key=lambda x: x[1])  # Sort by the Huffman code strings
    for i in range(len(sorted_codes) - 1):
        if sorted_codes[i + 1][1].startswith(sorted_codes[i][1]):
            return False, sorted_codes[i], sorted_codes[i + 1]  # Return the conflicting codes
    return True, None, None

# Given Huffman codes
huffman_codes = {
    0: '01', 1: '10111', 2: '101100', 3: '101001', 4: '1010100', 5: '0001010', 6: '1110110', 7: '000110110',
    8: '00011010', 9: '0000101010', 10: '0001011110', 11: '11011000', 12: '10101101', 13: '0010000110', 14: '110001001',
    15: '001001111', 16: '00110000', 17: '1000101011', 18: '1101100110', 19: '100011001', 20: '0001001000', 21: '1011011001',
    22: '1100010001', 23: '1101100100', 24: '100010010', 25: '1000010100', 26: '00100101111', 27: '10000101010',
    28: '00010010100', 29: '10000101110', 30: '11011011100', 31: '1101101111', 32: '1100001', 33: '10001010101',
    34: '10001001101', 35: '10101010000', 36: '1110100', 37: '00001101100', 38: '10001111110', 39: '10000101011',
    40: '100110110', 41: '10001100001', 42: '001000010100', 43: '10001111111', 44: '10000101100', 45: '0000100000',
    46: '1110111', 47: '0010010110', 48: '00000011', 49: '110111', 50: '1110101', 51: '11000000', 52: '1001100',
    53: '10011010', 54: '00001011', 55: '001001100', 56: '000010100', 57: '11000101', 58: '1010101001', 59: '1011011000',
    60: '1001101111', 61: '10001000001', 62: '11011010001', 63: '10101010111', 64: '001100111', 65: '101101110',
    66: '0001011111', 67: '100010100', 68: '001100100', 69: '10010', 70: '10110110110', 71: '10000101101', 72: '001101',
    73: '000111', 74: '0000100001', 75: '10101111', 76: '11000001', 77: '10001101', 78: '1010000', 79: '101011001',
    80: '00100100', 81: '00100001011', 82: '00010000', 83: '11001', 84: '00100000', 85: '10101011', 86: '0001011100',
    87: '11011010110', 88: '0000101011', 89: '00100101000', 90: '00001100', 91: '00100111000', 92: '1101101100',
    93: '101011101', 94: '11011011011', 95: '1111', 96: '1011011010', 97: '11100', 98: '1010001', 99: '100111',
    100: '0000111', 101: '11010', 102: '000101100', 103: '10001011', 104: '1100011', 105: '0000011', 106: '100110111000',
    107: '1000010001', 108: '1000011', 109: '0011101', 110: '0000000', 111: '001111', 112: '0000010', 113: '11000100000',
    114: '100000', 115: '0011100', 116: '00101', 117: '00110001', 118: '00010001', 119: '001100110', 120: '1011010',
    121: '000011010', 122: '00100101110', 123: '110110101111', 124: '000000101000', 125: '100001001000', 126: '00110010110',
    127: '10110110111', 128: '1101101001', 129: '000100100100', 130: '10110111110', 131: '000000100', 132: '1010111000',
    133: '1000100010', 134: '110110011111', 135: '0000100011000', 136: '11011001110', 137: '0010001', 138: '0010000111101',
    139: '00010011', 140: '000101101001', 141: '001001101', 142: '100110111001', 143: '110110101010', 144: '0001100',
    145: '00010010101', 146: '101101111000', 147: '100001011111', 148: '10110111101', 149: '001001010110', 150: '0000100011010',
    151: '100011000110', 152: '000100100101', 153: '0001001011000', 154: '101010101011', 155: '110110101110', 156: '11011010000',
    157: '110110010100', 158: '001000011100', 159: '0011001010', 160: '00000010111', 161: '0000001010100', 162: '110110101011',
    163: '101011100101', 164: '000100101101', 165: '100010011100', 166: '100011000000', 167: '100011111000', 168: '001001010100',
    169: '110110010101', 170: '001100101111', 171: '101011100111', 172: '000000101001', 173: '101010101100', 174: '0000100011011',
    175: '100010011101', 176: '00001000111', 177: '110110101000', 178: '100011000111', 179: '0000100011001', 180: '000000101011',
    181: '0000001010101', 182: '000100100110', 183: '100010000000', 184: '00010110101', 185: '000101110110', 186: '001001110110',
    187: '101101111001', 188: '001100101110', 189: '110001000011', 190: '001000011101', 191: '101010101101', 192: '101011000',
    193: '000110111', 194: '1000010000', 195: '100011110', 196: '0000110111', 197: '001000010101', 198: '11011001011',
    199: '10001001100', 200: '00010111010', 201: '000011011011', 202: '101010100011', 203: '100010000001', 204: '000000101101',
    205: '100001001011', 206: '101010100010', 207: '100110111011', 208: '0000100010', 209: '100001001010', 210: '001001110011',
    211: '100011111001', 212: '000100100111', 213: '110110110100', 214: '100011111011', 215: '100010011111', 216: '00100111010',
    217: '000011011010', 218: '000101101000', 219: '001001010111', 220: '001001010101', 221: '0010000111100', 222: '0001001011001',
    223: '110110011110', 224: '1000100001', 225: '100001011110', 226: '101010101010', 227: '110110101001', 228: '001000011111',
    229: '0010000100', 230: '101011100110', 231: '110001000010', 232: '10001110', 233: '10001010100', 234: '101011100100',
    235: '00100101001', 236: '0001011011', 237: '100110111010', 238: '110110110101', 239: '100011000101', 240: '1000010011',
    242: '11011011101', 244: '10110111111', 245: '100011000001', 246: '100011111010', 247: '000101110111', 248: '1000100011',
    250: '001001110010', 252: '000000101100', 253: '001001110111', 254: '00010010111', 255: '00001001'
}

# Convert the Huffman codes to a list of tuples for sorting
code_list = [(k, v) for k, v in huffman_codes.items()]

# Check if the codes are prefix-free
is_valid, conflict1, conflict2 = is_prefix_free(code_list)
if is_valid:
    print("The Huffman codes are valid and prefix-free.")
else:
    print(f"The Huffman codes are not valid. Conflict between {conflict1} and {conflict2}.")
